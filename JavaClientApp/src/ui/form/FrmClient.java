/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.form;

import domain.Client;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import table.model.TableModelClient;
import ui.controller.Controller;

/**
 *
 * @author Dell E5450
 */
public class FrmClient extends javax.swing.JFrame {

    /**
     * Creates new form FrmClient
     */
    private List<Client> clients = new ArrayList<>();
    private Client selectedClient;
    private List<Client> resultClients = new ArrayList<>();

    public FrmClient() {
        initComponents();

        setTitle("Client");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        try {
            clients = Controller.getInstance().getAllClients();
        } catch (Exception ex) {
            System.out.println("Klijenti nisu uspesno ucitani iz baze");
            ex.printStackTrace();
        }
        fillTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblClients = new javax.swing.JTable();
        btnNew = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtAttribute = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbParameter = new javax.swing.JComboBox<>();
        btnResetTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblClients.setForeground(new java.awt.Color(64, 43, 58));
        tblClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Surname", "Phone number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClients.setSelectionBackground(new java.awt.Color(255, 155, 210));
        jScrollPane1.setViewportView(tblClients);

        btnNew.setBackground(new java.awt.Color(255, 155, 210));
        btnNew.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNew.setForeground(new java.awt.Color(64, 43, 58));
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(214, 52, 132));
        btnCancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(64, 43, 58));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 155, 210));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(64, 43, 58));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 155, 210));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(64, 43, 58));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(255, 155, 210));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(64, 43, 58));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbParameter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Surname", "Phone number" }));
        cmbParameter.setSelectedIndex(-1);
        cmbParameter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbParameterItemStateChanged(evt);
            }
        });

        btnResetTable.setBackground(new java.awt.Color(255, 155, 210));
        btnResetTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnResetTable.setForeground(new java.awt.Color(64, 43, 58));
        btnResetTable.setText("Reset table");
        btnResetTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(cmbParameter, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnResetTable))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnResetTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addGap(41, 41, 41)
                        .addComponent(btnCancel))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        try {
            new FrmNewClient(this).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Can not initialize view!\n" + ex.getMessage(), "New Client", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int row = tblClients.getSelectedRow();
        if (row != -1) {
            selectedClient = clients.get(row);
            new FrmUpdateClient(this).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Prvo izaberite red tabele", "Greska", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String attribute = txtAttribute.getText();

        if (attribute.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Unesite parametar za pretragu", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }

        switch (cmbParameter.getSelectedIndex()) {
            case -1:
                JOptionPane.showMessageDialog(this, "Prvo izaberite po cemu zelite da pretrazite", "Greska", JOptionPane.ERROR_MESSAGE);
                break;
            case 0:
                searchByName(attribute);
                break;
            case 1:
                searchBySurname(attribute);
                break;
            case 2:
                searchByPhoneNumber(attribute);
                break;
            default:
                throw new AssertionError();
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cmbParameterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbParameterItemStateChanged

    }//GEN-LAST:event_cmbParameterItemStateChanged

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int yesNo = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da izbrisete klijenta?", "Potvrda", JOptionPane.YES_NO_OPTION);

            if (yesNo == JOptionPane.YES_OPTION) {

                clients = Controller.getInstance().getAllClients();

                int row = tblClients.getSelectedRow();
                if (row != -1) {
                    selectedClient = clients.get(row);

                    try {
                        Controller.getInstance().deleteClient(selectedClient);
                        JOptionPane.showMessageDialog(this, "Client deleted!\nGenerated ID: [" + selectedClient.getClientID() + "]", "Delete Client", JOptionPane.INFORMATION_MESSAGE);

                        fillTable();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Client not deleted!\n" + ex.getMessage(), "Delete Client", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Prvo izaberite red tabele", "Greska", JOptionPane.ERROR_MESSAGE);

                }
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnResetTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetTableActionPerformed
        try {
            fillTable();
        } catch (Exception ex) {
            System.out.println("Tabela nije uspesno popunjena");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnResetTableActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnResetTable;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbParameter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClients;
    private javax.swing.JTextField txtAttribute;
    // End of variables declaration//GEN-END:variables

    public void fillTable() {
        try {
            clients = Controller.getInstance().getAllClients();
            try {
                TableModelClient tm = new TableModelClient(clients);
                tblClients.setModel(tm);
            } catch (Exception ex) {
                System.out.println("Tabela nije uspesno popunjena");
                ex.printStackTrace();
            }

        } catch (Exception ex) {
            Logger.getLogger(FrmClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillTable(List<Client> clients) {
        try {
            try {
                TableModelClient tm = new TableModelClient(clients);
                tblClients.setModel(tm);
            } catch (Exception ex) {
                System.out.println("Tabela nije uspesno popunjena");
                ex.printStackTrace();
            }

        } catch (Exception ex) {
            Logger.getLogger(FrmClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Client getSelectedClient() {
        return selectedClient;
    }

    private void searchByName(String attribute) {
        resultClients.clear();
        for (Client client : clients) {
            if (client.getName().equals(attribute)) {
                resultClients.add(client);
            }
        }

        if (resultClients.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nepostoje klijenti za izabranu vrednost", "Greska", JOptionPane.ERROR_MESSAGE);
        }

        fillTable(resultClients);

    }

    private void searchBySurname(String attribute) {
        resultClients.clear();
        for (Client client : clients) {
            if (client.getSurname().equals(attribute)) {
                resultClients.add(client);
            }
        }

        if (resultClients.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nepostoje klijenti za izabranu vrednost", "Greska", JOptionPane.ERROR_MESSAGE);
        }

        fillTable(resultClients);
    }

    private void searchByPhoneNumber(String attribute) {
        long phoneNumber = Long.parseLong(attribute);
        resultClients.clear();
        for (Client client : clients) {
            if (client.getPhoneNumber() == phoneNumber) {
                resultClients.add(client);
            }
        }
        if (resultClients.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nepostoje klijenti za izabranu vrednost", "Greska", JOptionPane.ERROR_MESSAGE);
        }

        fillTable(resultClients);
    }

}
